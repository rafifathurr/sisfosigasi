<?php

namespace App\Http\Controllers\AgeVulnerabilityClassification;

use App\Http\Controllers\Controller;
use App\Models\Pemerintah\AgeVulnerabilityClassification;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Yajra\DataTables\DataTables;

class AgeVulnerabilityClassificationControler extends Controller
{
    public function __construct()
    {
        /**
         * Super Admin Access
         */
        $this->middleware('role:super-admin', ['except' => ['index', 'show']]);

        /**
         * Super Admin and Pemerintah Access
         */
        $this->middleware('role:super-admin|pemerintah', ['except' => ['create', 'store', 'edit', 'update', 'destroy']]);
    }
    public function index(Request $request)
    {
        try {
            $has_create_access = User::find(Auth::user()->id)->hasRole(['super-admin']);

            /**
             * Request As Datatable
             */
            if ($request->ajax()) {
                $avc = AgeVulnerabilityClassification::whereNull('deleted_by')->whereNull('deleted_at')->get();

                if ($has_create_access) {
                    return DataTables::of($avc)
                        ->addIndexColumn()
                        ->addColumn('action', function ($row) {
                            $btn = '<button onclick="crudAction(\'edit\', ' . $row->id . ')" class="btn btn-sm btn-warning my-1"><i class="fas fa-pencil-alt"></i></button>';
                            $btn .= ' <button onclick="crudAction(\'delete\', ' . $row->id . ')" class="btn btn-sm btn-danger my-1 ml-1"><i class="fas fa-trash"></i></button>';
                            return $btn;
                        })
                        ->rawColumns(['action'])
                        ->make(true);
                } else {
                    return DataTables::of($avc)->addIndexColumn()->make(true);
                }
            }

            $data['has_create_access'] = $has_create_access;
            return view('age_vulnerability_classification.index', $data);
        } catch (\Throwable $th) {
            return redirect()->back()->withErrors($th->getMessage());
        }
    }

    public function store(Request $request)
    {
        try {
            DB::beginTransaction();
            $store_avc = AgeVulnerabilityClassification::create([
                'name' => $request->name,
                'min_year' => $request->min_age,
                'max_year' => $request->max_age,
                'created_by' => Auth::user()->id,
                'created_at' => Carbon::now(),
                'updated_by' => Auth::user()->id,
            ]);

            /**
             * Validation Submit
             */
            if ($store_avc) {
                DB::commit();
                return redirect()->with('success', 'Data Berhasil Disimpan');
            } else {
                DB::rollBack();
                return redirect()
                    ->back()
                    ->withInput()
                    ->with(['failed' => 'Data Gagal Dimasukan']);
            }
        } catch (\Throwable $th) {
            return redirect()
                ->back()
                ->withInput()
                ->withErrors(['error' => 'Data Gagal Dimasukan' . $th->getMessage()]);
        }
    }

    public function update(Request $request)
    {
        try {
            $update_avc = AgeVulnerabilityClassification::where('id', $request->id)->update([
                'name' => $request->name,
                'min_year' => $request->min_age,
                'max_year' => $request->max_age,
                'updated_by' => Auth::user()->id,
            ]);

            /**
             * Validation Submit
             */
            if ($update_avc) {
                DB::commit();
                return redirect()->with('success', 'Data Berhasil Disimpan');
            } else {
                DB::rollBack();
                return redirect()
                    ->back()
                    ->withInput()
                    ->with(['failed' => 'Data Gagal Dimasukan']);
            }
        } catch (\Throwable $th) {
            return redirect()
                ->back()
                ->withInput()
                ->withErrors(['error' => 'Data Gagal Dimasukan' . $th->getMessage()]);
        }
    }

    public function delete(Request $request)
    {
        try {
            DB::beginTransaction();
            $delete_avc = AgeVulnerabilityClassification::where('id', $request->id)->update([
                'deleted_by' => Auth::user()->id,
                'deleted_at' => Carbon::now(),
            ]);

            if ($delete_avc) {
                DB::commit();
                return redirect()->with('success', 'Data Berhasil Dihapus');
            } else {
                DB::rollBack();
                return redirect()->with('failed', 'Data Gagal Dihapus');
            }
        } catch (\Throwable $th) {
            return redirect()
                ->back()
                ->withInput()
                ->withErrors(['error' => 'Data Gagal Dimasukan' . $th->getMessage()]);
        }
    }

    public function show(Request $request)
    {
        try {
            $avc = AgeVulnerabilityClassification::where('id', $request->id)->first();

            return $avc;
        } catch (\Throwable $th) {
            return $th->getMessage();
        }
    }

    public function checkLastAge()
    {
        try {
            $last_age = AgeVulnerabilityClassification::orderBy('id', 'desc')->first();

            return $last_age;
        } catch (\Throwable $th) {
            return redirect()
                ->back()
                ->withInput()
                ->withErrors(['error' => 'Data Gagal Dimasukan' . $th->getMessage()]);
        }
    }
}
