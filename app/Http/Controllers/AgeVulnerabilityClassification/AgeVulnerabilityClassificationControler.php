<?php

namespace App\Http\Controllers\AgeVulnerabilityClassification;

use App\Http\Controllers\Controller;
use App\Models\Pemerintah\AgeVulnerabilityClassification;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Yajra\DataTables\DataTables;

class AgeVulnerabilityClassificationControler extends Controller
{
    public function index(Request $request)
    {

        try {
            //code...

            if ($request->ajax()) {

                $avc = AgeVulnerabilityClassification::all();

                return DataTables::of($avc)
                    ->addIndexColumn()
                    ->addColumn('action', function ($row) {
                        $btn = '<button onclick="crudAction(\'edit\', ' . $row->id . ')" class="btn btn-sm btn-outline-warning">Edit</button>';
                        $btn .= ' <button onclick="crudAction(\'delete\', ' . $row->id . ')" class="btn btn-sm btn-outline-danger">Delete</button>';
                        return $btn;
                    })
                    ->rawColumns(['action'])
                    ->make(true);
            }

            return view('pemerintah.data_master.age_vulnerability_classification.index');
        } catch (\Throwable $th) {

            return redirect()->back()->withErrors($th->getMessage());
        }
    }

    public function store(Request $request)
    {

        try {

            // dd($request);

            // return $request;

            $store_avc = AgeVulnerabilityClassification::create([
                'name' => $request->name,
                'min_year' => $request->min_age,
                'max_year' => $request->max_age,
                'created_by' => Auth::user()->id,
                'created_at' => Carbon::now(),
                'updated_by' => Auth::user()->id,
            ]);

            return redirect()->with('success', 'Data successfully stored.');
        } catch (\Throwable $th) {

            return redirect()->back()->withInput()->withErrors(['error' => 'Data gagal dimasukan' . $th->getMessage()]);
        }
    }

    public function update(Request $request)
    {

        try {

            $update_avc = AgeVulnerabilityClassification::where('id', $request->id)->update([
                'name' => $request->name,
                'min_year' => $request->min_age,
                'max_year' => $request->max_age,
                'updated_by' => Auth::user()->id,
            ]);

            return redirect()->with('success', 'Data successfully stored.');
        } catch (\Throwable $th) {

            return redirect()->back()->withInput()->withErrors(['error' => 'Data gagal dimasukan' . $th->getMessage()]);
        }
    }

    public function delete(Request $request)
    {

        try {

            $delete_avc = AgeVulnerabilityClassification::where('id', $request->id)->delete();

            return redirect()->with('success', 'Data successfully stored.');
        } catch (\Throwable $th) {

            return redirect()->back()->withInput()->withErrors(['error' => 'Data gagal dimasukan' . $th->getMessage()]);
        }
    }

    public function show(Request $request)
    {

        try {

            $avc = AgeVulnerabilityClassification::where('id', $request->id)->first();

            return $avc;
        } catch (\Throwable $th) {

            return $th->getMessage();
        }
    }

    public function checkLastAge()
    {

        try {

            $last_age = AgeVulnerabilityClassification::orderBy('id', 'desc')->first();

            return $last_age;
        } catch (\Throwable $th) {

            return redirect()->back()->withInput()->withErrors(['error' => 'Data gagal dimasukan' . $th->getMessage()]);
        }
    }
}
